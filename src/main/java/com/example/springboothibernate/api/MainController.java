package com.example.springboothibernate.api;



        import com.example.springboothibernate.PersonRepository;
        import com.example.springboothibernate.exception.CannotCalculateRequestedAge;
        import com.example.springboothibernate.model.Person;
        import com.example.springboothibernate.model.PersonWithAge;
        import com.example.springboothibernate.model.TotalAgePeople;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.cglib.core.Local;
        import org.springframework.data.jpa.repository.Query;
        import org.springframework.http.HttpStatus;
        import org.springframework.http.ResponseEntity;
        import org.springframework.stereotype.Controller;
        import org.springframework.web.bind.annotation.*;

        import java.sql.Date;
        import java.time.LocalDate;
        import java.time.Period;
        import java.util.ArrayList;
        import java.util.List;
        import java.util.Map;
        import java.util.HashMap;
        import java.util.Optional;

        import static org.hibernate.internal.util.StringHelper.count;

@Controller // This means that this class is a Controller
@RequestMapping(path="/spring-boot-hibernate") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PersonRepository PersonRepository;

    // http://localhost:8080/spring-boot-hibernate/people
    @PostMapping(path="/people") // Map ONLY POST Requests
    public @ResponseBody String addNewPerson (@RequestBody Person person) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        PersonRepository.save(person);
        return "Saved";
    }


    // http://localhost:8080/spring-boot-hibernate/people
    @GetMapping(path="/people")
    public @ResponseBody Iterable<Person> getAllPersons() {
        // This returns a JSON or XML with the users
        return PersonRepository.findAll();
//        List<Person> persons = new ArrayList<Person>();
//        Person person = new Person();
//        person.setName("test");
//        person.setBirth(LocalDate.of(2000,01,21));
//        persons.add(person);
//        Person person2 = new Person();
//        person2.setName("test2");
//        person2.setBirth(LocalDate.of(2000,01,21));
//        persons.add(person2);
//        return persons;
    }

    // http://localhost:8080/spring-boot-hibernate/people/2
    @GetMapping(path="/people/{id}")
    public @ResponseBody Optional<Person> getPersonById(@PathVariable("id") int id) {
        return PersonRepository.findById(id);
    }

    // http://localhost:8080/spring-boot-hibernate/people/2
    @DeleteMapping(path="/people/{id}")
    public @ResponseBody void deletePersonByid(@PathVariable("id") int id) {
        PersonRepository.deleteById(id);
    }

    @DeleteMapping(path="/people")
    public @ResponseBody void deletePersons() {
        PersonRepository.deleteAll();
    }

    // http://localhost:8080/spring-boot-hibernate/people/jubilee?totalAge=150
    @GetMapping(path="/people/jubilee")
    public @ResponseBody TotalAgePeople getTotalAge(@RequestParam("totalAge") int requestedTotalAge) {
        TotalAgePeople result = new TotalAgePeople();
        Iterable<Person> People = PersonRepository.findAll();
        Map<String, Map<LocalDate, Integer>> datapeople = new HashMap<>();


        Integer totalPeople = 0;
        Integer totalAge = 0;
        LocalDate date = LocalDate.now();

        for (Person p : People) {
                totalAge += Period.between(p.getBirth(), date).getYears();
                totalPeople += 1;
        }

//            als > requestedTotalAge error 400
        if (totalAge < requestedTotalAge) {
            int yearsToAdd = (requestedTotalAge - totalAge)/totalPeople;
            date = date.plusYears(yearsToAdd);
        }

        if (totalAge > requestedTotalAge || totalPeople == 0) {
//            @ResponseStatus(HttpStatus.BAD_REQUEST)
            throw new CannotCalculateRequestedAge();
//            return null;
        }


        while (totalAge < requestedTotalAge) {
            totalAge = 0;
            for (Person p : People) {
                totalAge += Period.between(p.getBirth(), date).getYears();
            }
            if (totalAge < requestedTotalAge) {
                date = date.plusDays(1);
            }
        }
        List<PersonWithAge> lpwa = new ArrayList<>();

        for (Person p : People){
            PersonWithAge pwa = new PersonWithAge(p);
            pwa.setAge(Period.between(pwa.getBirth(), date).getYears());
            lpwa.add(pwa);
        }

        result.setList(lpwa);
        result.setDate(date);

        return result;
    }
}